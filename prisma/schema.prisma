generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  phoneNumber      String            @unique
  roles            UserRole[]
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  xpiId            Int?              @unique 
  // Common profile fields moved from other models
  name             String?
  email            String?
  gender           Gender?
  pronouns         Pronouns?
  dateOfBirth      DateTime?
  profileImage     String?
  // Relationships
  provider         Provider?
  BusinessProvider BusinessProvider?
  LocationProvider LocationProvider?

  @@index([phoneNumber, id])
}

model Provider {
  id                 Int               @id @default(autoincrement())
  userId             Int               @unique
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  address            String?
  city               String?
  state              String?
  zipCode            String?
  latitude           Float?
  longitude          Float?
  soloProvider       Boolean?          @default(false)
  isVerified         Boolean           @default(false)
  rating             Float?            @default(0)
  totalReviews       Int               @default(0)
  isActive           Boolean           @default(true)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  businessProviderId Int?              // Optional - only set for business providers (soloProvider = false)
  businessProvider   BusinessProvider? @relation(fields: [businessProviderId], references: [id], onDelete: Cascade)
  // Relationships
  services           Service[]
  availability       Availability[]
  conversations      Conversation[]

  @@index([isActive, isVerified, soloProvider, businessProviderId])
}


model BusinessProvider {
  id             Int              @id @default(autoincrement())
  userId         Int              @unique
  User           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessName   String
  businessType   String
  businessEmail  String?
  address        String?
  city           String?
  state          String?
  zipCode       String?
  latitude      Float?
  longitude     Float?
  availabilityModification Boolean @default(false)
  serviceModification     Boolean @default(false)
  deliveryOptionChoices   Boolean @default(false)
  bookingApprovalRequired  Boolean @default(false)
  changeCategoryOption Boolean @default(false)
  priceModificationOption Boolean @default(false)
  adminName      String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  // Relationships
  providers      Provider[]       // Business providers will have corresponding Provider entries
  BusinessMember BusinessMember[]
  Services       Service[]
  Availability   Availability[]
  conversations  Conversation[]
}

model BusinessMember {
  id                 Int               @id @default(autoincrement())
  businessId         Int
  name               String
  email              String            @unique
  phoneNumber        String            @unique
  role               BusinesMemberRole
  gender             Gender?
  pronouns           Pronouns?
  isActive           Boolean           @default(true)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  BusinessProvider   BusinessProvider? @relation(fields: [businessProviderId], references: [id])
  businessProviderId Int?
}

model LocationProvider {
  id             Int              @id @default(autoincrement())
  userId         Int              @unique
  User           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  phone          String?
  contactPerson  String?
  website        String?
  fullAddress    String?
  address        String?
  city           String?
  state          String?
  zipCode        String?
  latitude       Float?
  longitude      Float?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  LocationMember LocationMember[]
  LocationService LocationService[]
  Availability   Availability[]
  conversations  Conversation[]
}

model LocationService {
  id                 Int               @id @default(autoincrement())
  name               String
  description       String            @default("")
  pricePerHour      Decimal           @db.Decimal(10, 2)
  category          String?           @default("")
  partAvailableForBooking       LocationBooking        
  advanceNoticeTime    String?
  parkingInstruction String?           @default("")
  sessionSize        Int?
  equipmentAvailable String?           @default("")
  generalRules       String?           @default("")
  activeFacilityInsurance Boolean      @default(false)
  accessibilityFeatures String?     @default("")
  wifiAvailability   Boolean @default(false)
  additionalNotes   String?
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  LocationProvider  LocationProvider? @relation(fields: [locationProviderId], references: [id], onDelete: Cascade)
  locationProviderId Int?

  serviceCategoryId Int?
  serviceCategory   ServiceCategory?  @relation(fields: [serviceCategoryId], references: [id], onDelete: Cascade)

  @@index([category, wifiAvailability, sessionSize])
  @@index([locationProviderId, isActive])
}

model LocationMember {
  id                 Int               @id @default(autoincrement())
  businessId         Int
  name               String
  email              String            @unique
  phoneNumber        String            @unique
  gender             Gender?
  pronouns           Pronouns?
  role               BusinesMemberRole
  isActive           Boolean           @default(true)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  LocationProvider   LocationProvider? @relation(fields: [businessProviderId], references: [id])
  businessProviderId Int?
}

model Conversation {
  id                 Int               @id @default(autoincrement())
  sessionId          String            @unique
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  
  // Provider relationships
  providerId         Int?
  provider           Provider?         @relation(fields: [providerId], references: [id])
  businessProviderId Int?
  businessProvider   BusinessProvider? @relation(fields: [businessProviderId], references: [id])
  locationProviderId Int?
  locationProvider   LocationProvider? @relation(fields: [locationProviderId], references: [id])
  
  // Messages relationship
  messages           Message[]

  @@index([sessionId])
  @@index([providerId, businessProviderId, locationProviderId])
}

model Message {
  id              Int          @id @default(autoincrement())
  conversationId  Int
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  question        String?
  content         String
  audioUrl        String?
  videoUrl        String?
  createdAt       DateTime     @default(now())

  @@index([conversationId, createdAt])
}

model ServiceCategory {
  id            Int @id @default(autoincrement())
  categoryName  String @unique
  activities    Activity[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     Int?
  services      Service[]
  locationServices LocationService[]
}

model Activity {
  id               Int @id @default(autoincrement())
  name             String
  serviceCategoryId Int
  serviceCategory  ServiceCategory @relation(fields: [serviceCategoryId], references: [id], onDelete: Cascade)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  services         Service[]

  @@unique([serviceCategoryId, name])
}

model Service {
  id              Int      @id @default(autoincrement())
  name            String
  description     String   @default("")
  pricePerHour    Decimal  @db.Decimal(10, 2)
  category        String?  @default("")
  ageMin          Int?
  ageMax          Int?
  serviceProviderOptions ServiceProviderOptions[]
  bookingPreference BookingPreference?
  subCategory     String?
  additionalNotes String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Foreign Keys
  providerId Int?
  provider   Provider? @relation(fields: [providerId], references: [id], onDelete: Cascade)

  serviceCategoryId Int?
  serviceCategory   ServiceCategory? @relation(fields: [serviceCategoryId], references: [id], onDelete: Cascade)

  activityId Int?
  activity   Activity? @relation(fields: [activityId], references: [id], onDelete: Cascade)
  
  businessProviderId Int?
  businessProvider   BusinessProvider? @relation(fields: [businessProviderId], references: [id], onDelete: Cascade)

  @@index([serviceCategoryId, activityId, ageMin, ageMax, providerId, businessProviderId, isActive])
}

model Availability {
  id         Int       @id @default(autoincrement())
  providerId Int?
  provider   Provider? @relation(fields: [providerId], references: [id], onDelete: Cascade)
  locationProviderId Int?
  locationProvider   LocationProvider? @relation(fields: [locationProviderId], references: [id], onDelete: Cascade)
  businessProviderId Int?
  businessProvider   BusinessProvider? @relation(fields: [businessProviderId], references: [id], onDelete: Cascade)
  dayOfWeek  DayOfWeek
  startTime  DateTime
  endTime    DateTime
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([providerId, locationProviderId, businessProviderId, dayOfWeek, startTime, endTime])
  @@index([providerId, locationProviderId, businessProviderId, dayOfWeek, isActive])
}

enum DayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum UserRole {
  SUPER_ADMIN
  MEMBER
  SOLO_PROVIDER
  BUSINESS_PROVIDER
  BUSINESS_EMPLOYEE
  LOCATION_PROVIDER
}

enum BusinesMemberRole {
  ADMIN // Can manage all aspects of the business. Including creating, updating, and deleting users and services.
  MANAGER // Can manage services. Including creating, updating, and deleting services.
  READ // Can only read and view services and users.
}

enum ServiceProviderOptions {
  AT_CUSTOMER_LOCATION
  AT_PROVIDER_LOCATION
  VIRTUAL
  LOCAL_PARTNER_LOCATION
}

enum BookingPreference {
  INSTANT_BOOKING
  REVIEW_REQUEST
}

enum LocationBooking {
  PART_OF_SPACE
  FULL_FACILITY
}

enum BookingNotice {
  NONE
  ONE_HOUR
  EIGHT_HOURS
  TWENTY_FOUR_HOURS
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Pronouns {
  HE_HIM
  SHE_HER
  THEY_THEM
  OTHER
}