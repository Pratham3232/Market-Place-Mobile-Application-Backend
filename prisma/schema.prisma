generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  phoneNumber      String            @unique
  name             String?
  email            String?
  roles            UserRole[]
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  // Relationships
  provider         Provider?
  BusinessProvider BusinessProvider?
  LocationProvider LocationProvider?
}

model Provider {
  id                 Int               @id @default(autoincrement())
  userId             Int               @unique
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  dateOfBirth        DateTime?
  bio                String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  profileImage       String?
  isVerified         Boolean           @default(false)
  rating             Float?            @default(0)
  totalReviews       Int               @default(0)
  isActive           Boolean           @default(true)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  // Relationships
  services           Service[]
  availability       Availability[]
  BusinessProvider   BusinessProvider? @relation(fields: [businessProviderId], references: [id])
  businessProviderId Int?

  @@index([city, state])
  @@index([isActive, isVerified])
}

model BusinessProvider {
  id             Int              @id @default(autoincrement())
  userId         Int              @unique
  User           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessName   String
  businessEmail  String?
  businessPhone  String?
  website        String?
  taxId          String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Provider       Provider[]
  BusinessMember BusinessMember[]
}

model BusinessMember {
  id                 Int               @id @default(autoincrement())
  businessId         Int
  name               String
  email              String            @unique
  phoneNumber        String            @unique
  role               BusinesMemberRole
  isActive           Boolean           @default(true)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  BusinessProvider   BusinessProvider? @relation(fields: [businessProviderId], references: [id])
  businessProviderId Int?
}

model LocationProvider {
  id             Int              @id @default(autoincrement())
  userId         Int              @unique
  User           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessName   String
  businessEmail  String?
  businessPhone  String?
  website        String?
  taxId          String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  LocationMember LocationMember[]
}

model LocationMember {
  id                 Int               @id @default(autoincrement())
  businessId         Int
  name               String
  email              String            @unique
  phoneNumber        String            @unique
  role               BusinesMemberRole
  isActive           Boolean           @default(true)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  LocationProvider   LocationProvider? @relation(fields: [businessProviderId], references: [id])
  businessProviderId Int?
}

model Service {
  id              Int      @id @default(autoincrement())
  name            String
  description     String   @default("")
  pricePerHour    Decimal  @db.Decimal(10, 2)
  category        String?  @default("")
  subCategory     String?
  additionalNotes String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Foreign Keys
  providerId Int
  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@index([category, subCategory])
  @@index([providerId, isActive])
}

model Availability {
  id         Int       @id @default(autoincrement())
  providerId Int
  provider   Provider  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  dayOfWeek  DayOfWeek
  startTime  DateTime
  endTime    DateTime
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([providerId, dayOfWeek, startTime, endTime])
  @@index([providerId, dayOfWeek, isActive])
}

enum DayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum UserRole {
  SUPER_ADMIN
  MEMBER
  SOLO_PROVIDER
  BUSINESS_PROVIDER
  LOCATION_PROVIDER
}

enum BusinesMemberRole {
  ADMIN // Can manage all aspects of the business. Including creating, updating, and deleting users and services.
  MANAGER // Can manage services. Including creating, updating, and deleting services.
  READ // Can only read and view services and users.
}
