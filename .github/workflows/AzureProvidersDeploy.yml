name: Deploy Container
on:
  push:
    branches:
      - deploystoragetostg
    paths:
    - apps/providers/*
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: STG
        type: choice
        options:
          - PROD
          - STG


env:
  TF_VAR_rg_name: ${{ vars.RG_NAME }}
  TF_VAR_acr_name: ${{ vars.ACR_NAME }}
  TF_VAR_container_app_env_name: ${{ vars.CONTAINER_APP_ENV_NAME }}
  TF_VAR_database_url: ${{ secrets.DATABASE_URL }}
  TF_VAR_twilio_account_sid: ${{ secrets.TWILIO_ACCOUNT_SID }}
  TF_VAR_twilio_auth_token: ${{ secrets.TWILIO_AUTH_TOKEN }}
  TF_VAR_twilio_messaging_service_sid: ${{ secrets.TWILIO_MESSAGING_SERVICE_SID }}
  TF_VAR_twilio_phone_number: ${{ secrets.TWILIO_PHONE_NUMBER }}
  TF_VAR_redis_host: ${{ secrets.REDIS_HOST }}
  TF_VAR_rabbitmq_host: ${{ secrets.RABBITMQ_HOST }}
  TF_VAR_xpi_base_url: ${{ secrets.XPI_BASE_URL }}
  TF_VAR_AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}
  TF_VAR_auth_container: ${{ vars.AUTH_CONTAINER }}
  TF_VAR_auth_image: ${{ vars.AUTH_IMAGE }}
  TF_VAR_providers_container: ${{ vars.PROVIDERS_CONTAINER }}
  TF_VAR_providers_image: ${{ vars.PROVIDERS_IMAGE }}
  TF_VAR_rabbitmq_container: ${{ vars.RABBITMQ_CONTAINER }}
  TF_VAR_rabbitmq_image: ${{ vars.RABBITMQ_IMAGE }}
  TF_VAR_redis_container: ${{ vars.REDIS_CONTAINER }}
  TF_VAR_redis_image: ${{ vars.REDIS_IMAGE }}
  TF_VAR_storage_container: ${{ vars.STORAGE_CONTAINER }}
  TF_VAR_storage_image: ${{ vars.STORAGE_IMAGE }}
  ACR_LOGIN_SERVER: ${{ vars.ACR_NAME }}.azurecr.io
  IMAGE_TAG: "latest"

jobs:
  deploy-docker-image-to-acr:
    environment: STG
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR using Azure CLI
        run: az acr login --name ${{ vars.ACR_NAME }}

      - name: Set up QEMU (for cross-platform builds)
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push auth image to ACR (linux/amd64)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./apps/auth/Dockerfile
          push: true
          tags: ${{ env.ACR_LOGIN_SERVER }}/${{ vars.PROVIDERS_IMAGE }}:${{env.IMAGE_TAG}}
          platforms: linux/amd64
  

  deploy-container:
    runs-on: ubuntu-latest
    environment: STG
    needs: deploy-docker-image-to-acr
    env:
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID:       ${{ secrets.ARM_TENANT_ID }}
      ARM_CLIENT_ID:       ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET:   ${{ secrets.ARM_CLIENT_SECRET }}
      TF_STATE_RG: ${{ vars.TF_STATE_RG }}
      TF_STATE_STORAGE_ACCOUNT: ${{ vars.TF_STATE_STORAGE_ACCOUNT }}
      TF_STATE_CONTAINER: ${{ vars.TF_STATE_CONTAINER }}
      TF_STATE_KEY: ${{ vars.TF_STATE_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Set az subscription
        run: az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Debug az account
        run: |
          echo "ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID"
          az account show || true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init (with backend-config)
        working-directory: ./terraform
        run: |
          terraform init \
            -backend=true \
            -backend-config="resource_group_name=$TF_STATE_RG" \
            -backend-config="storage_account_name=$TF_STATE_STORAGE_ACCOUNT" \
            -backend-config="container_name=$TF_STATE_CONTAINER" \
            -backend-config="key=$TF_STATE_KEY"

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan
        
        
          